#! /usr/bin/env node

// Dependencies
var fs = require("fs");
var path = require("path");
var command = require("commander");
var _ = require("lodash");
var Tables = require("../index.js");
var output = require("../lib/output.js")(true);
var pkg = require("../package.json");


// Basic command line parts
command
  .description(pkg.description)
  .version(pkg.version);

// Options
var lineSpace = "\n                         ";
command.option("-i, --input [file]", "Input file to use.");
command.option("-o, --output [file]", "Force output to a specific SQLite database of this file name.  By default will create " + lineSpace + "an .sql version of the input file if the TABLES_DB_URI environment variable is not provided.");
command.option("-t, --type [csv|json]", "Input type; determined from file name if not provided.  Currently supports csv and json.");
command.option("-n, --table-name [name]", "Use a specific table name.  By default the name of the input file is used.");
command.option("-k, --key [name]", "This is suggested.  A comma-delimited list of columns that define a unique key.  A unique " + lineSpace + "key means that data can be updated instead of added to.  Should be used if models is not defined.");
command.option("-s, --silent", "Suppress output besides errors.");
command.option("-c, --config [file]", "Provide a JS file that exports configuration for Tables.  This allows for " + lineSpace + "the options that are not supported in the command line.");

// Parse
command.parse(process.argv);

// Validate input
var errors = isValid(command);
if (errors) {
  errors.forEach(function(e) {
    output.error(e);
  });

  process.exit(1);
}

// Make options for tables
var options = {
  input: command.input ? command.input : undefined,
  inputType: command.type ? command.type : undefined,
  tableName: command.tableName ? command.tableName : undefined,
  key: command.key ? command.key : undefined,
  output: !command.silent
};

// Checkout output
if (command.output) {
  options.db = "sqlite://" + command.output;
}

// Handle config file
if (command.config) {
  try {
    options = _.defaultsDeep(options, require(path.join(process.cwd(), command.config)));
  }
  catch (e) {
    output.error("Unable to read in config file with require function.");
    process.exit(1);
  }
}

// Create tables
var t = new Tables(options);


// Validate input
function isValid(input) {
  var errors = [];

  // Check that input file exists if provided
  if (input.input && !fs.existsSync(input.input)) {
    errors.push("Input file provided does not exist.");
  }

  // Check for streaming input if file not provided
  if (!input.config && !input.input && process.stdin.isTTY) {
    errors.push("Input file not provided and no data was piped in.");
  }

  // Check that config file exists if provided
  if (input.config && !fs.existsSync(input.config)) {
    errors.push("Config file provided does not exist.");
  }

  return errors.length ? errors : false;
}
